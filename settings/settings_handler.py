from admin.admin import error_handler
from settings.states import Settings
from events.events_text import send_message
from db.db import add_settings
from settings.settings_kb import settings_kb, menu_kb
from random import choice
from weather.weather_kb import cities
import asyncio
from aiogram import types, F, Bot, Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

router = Router()


@router.callback_query(F.data == 'settings', flags={'chat_action': 'typing'})
async def ask_settings(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(text='–ü—Ä–∏–≤–µ—Ç! –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É!'
                                       '–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É—Ç—Ä–µ–Ω–Ω–∏–µ/–≤–µ—á–µ—Ä–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è?')
    await asyncio.sleep(0.2)
    await callback.message.answer_sticker(sticker=choice(send_message),
                                          reply_markup=settings_kb
                                          )
    await state.set_state(Settings.mailing)


@router.message(Settings.mailing, flags={'chat_action': 'typing'})
async def mailing_settings(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(mailing=message.text)
    context_data = await state.get_data()
    mailing = context_data.get('mailing')
    if mailing.strip().lower() == '–¥–∞':
        await asyncio.sleep(0.2)
        await message.answer('–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥ –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–≥–æ–¥—ã', reply_markup=cities)
        await state.set_state(Settings.city)
    else:
        try:
            await add_settings(tg_id=message.from_user.id, mailing=0, city='NULL')
            await message.answer(text='–°–æ—Ö—Ä–∞–Ω–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!\n'
                                      '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—åüòâ',
                                 reply_markup=menu_kb)
            await state.clear()
        except Exception as error:
            await error_handler('mailing_settings:\n' + str(error), bot)
            await state.clear()


@router.message(Settings.city, flags={'chat_action': 'typing'})
async def city_settings(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(city=message.text)
    context_date = await state.get_data()
    city = context_date.get('city')
    try:
        await add_settings(tg_id=message.from_user.id, mailing=1, city=city)
        await message.answer(text='–°–æ—Ö—Ä–∞–Ω–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!\n'
                                  '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—åüòâ',
                             reply_markup=menu_kb)
        await state.clear()
    except Exception as error:
        await error_handler('city_settings:\n' + str(error), bot)
        await state.clear()
